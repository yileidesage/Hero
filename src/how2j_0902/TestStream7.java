package how2j_0902;
/*
所有的流,无论输入还是输出流,使用完毕以后,都应该关闭,如果不关闭,会产生对资源占用的浪费
当量比较大的时候,会影响到业务的正常开展
关闭流有三种方式:
1.try中关闭
2.finally中关闭
3.使用try()的方式

在try中关闭
在try的作用域里关闭文件输入流,在前面的示例中都是使用这种方式,这样做有一个弊端
如果文件不存在,或者读取的时候出现问题而抛出异常,那么就不会执行这一行关闭流的代码,存在巨大的资源占用隐患.
不推荐使用
uu
在finally中关闭
这是标准的关闭流的方式
1.首先把流的引用声明在try的外面,如果声明在try里面其作用域无法抵达finally.
2.在finally关闭之前,需要先判断引用是否为空
3.关闭的时候,需要再一次进行try catch处理
这是标准的严禁的关闭流的方式,但是看上去很繁琐,所以写不重要的或者测试代码的时候,
都会采用上面的有隐患的try的方式,因为不麻烦
示例代码如下:
在流代码的catch执行完以后,紧跟如下
finally{
if(null!=fis)   //fis为流对象的名字
{try{
fis.close();
}catch(IOException e){
e.printStackTrace();
}}}

使用try()的方式
把流定义在try()里,try catch或者finally结束的时候,会自动关闭
这种编写代码的方式叫做:try-with_resources,这是JDK7开始支持的技术
所有的流,都实现了一个几口叫做AutoCloseable,任何类实现了这个接口,
都可以try()中进行实例化.
并且在try,catch,finally结束的时候,自动关闭,回收相关资源
定义try()里的流,不需要设置结束,会自动刚结束,前提是,一定是把流定义在try(定义流的位置)里.

练习:将拆分文件和合并文件的习题,关闭流的风格更改为其他方式
 */
public class TestStream7 {
}
