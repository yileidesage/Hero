package how2j_09052;

/*
每一个线程的启动和结束都是比较消耗时间和占用资源的
如果在系统中用到了很多的线程,大量的启动和结束动作会导致系统的性能变卡,响应变慢
为了解决这个问题,引入线程池这种设计思想
线程池的模式很想生产消费者模型,消费的对象是一个一个能够运行的任务

线程池设计的思路
线程池的思路和生产消费者模型是很接近的
1.准备一个任务容器
2.一次性启动10个消费者线程
3.刚开始任务容器是空的,所有线程都wait在上面
4.指导一个外部线程网这个容器中扔了一个任务,就会有一个消费者线程被唤醒:notify
5.这个消费者线程取出"任务",并且执行这个任务,执行完毕后,继续等待下一次任务到来.
6.如果短时间内,有较多的任务加入,那么就会有多个线程被唤醒,去执行这些任务
在整个过程中,都不需要创建新的线程,而是循环使用这些已经存在的线程

开发一个自定义线程池
这是一个自定义线程池,虽然不够完善,但是已经足以说明线程池的工作原理
缓慢的给这个线程池添加任务,会看到许多线程来执行这些任务
线程7执行完毕任务以后,又回到池子里,下一次任务来的饿时候,线程7又来执行性的任务
 */
public class TestThread18 {
    public static void main(String[] args) {
        ThreadPool pool = new ThreadPool();
        for (int i = 0; i < 30; i++) {
            Runnable task = new Runnable() {
                @Override
                public void run() {
                    //System.out.println("执行任务")
                    //任务可能是打印一句话
                    //肯能是访问文件
                    //可能是做排序
                }
            };
            pool.add(task);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        }
    }
}
